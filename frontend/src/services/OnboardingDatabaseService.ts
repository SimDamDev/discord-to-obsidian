'use client';

import { PrismaClient } from '@prisma/client';

// Interface pour la configuration d'onboarding
export interface OnboardingConfigData {
  authAndConsent?: any;
  versionChoice?: any;
  configuration?: any;
  channelSelection?: any;
  obsidianConfig?: any;
  finalConfiguration?: any;
}

// Interface pour les donn√©es d'√©tape
export interface OnboardingStepData {
  [key: string]: any;
}

class OnboardingDatabaseService {
  private prisma: PrismaClient;

  constructor() {
    this.prisma = new PrismaClient();
  }

  // Sauvegarder ou mettre √† jour la configuration d'onboarding
  async saveOnboardingConfiguration(
    userId: string,
    stepName: string,
    stepData: OnboardingStepData
  ): Promise<void> {
    try {
      console.log(`üíæ Sauvegarde √©tape ${stepName} pour l'utilisateur ${userId}:`, stepData);

      // V√©rifier si une configuration existe d√©j√†
      const existingConfig = await this.prisma.onboardingConfiguration.findUnique({
        where: { userId }
      });

      if (existingConfig) {
        // Mettre √† jour la configuration existante
        const updateData: any = {};
        updateData[stepName] = stepData;
        updateData.updatedAt = new Date();

        // Si c'est l'√©tape finale, marquer comme compl√©t√©e
        if (stepName === 'finalConfiguration') {
          updateData.isCompleted = true;
        }

        await this.prisma.onboardingConfiguration.update({
          where: { userId },
          data: updateData
        });

        console.log(`‚úÖ Configuration mise √† jour pour l'utilisateur ${userId}`);
      } else {
        // Cr√©er une nouvelle configuration
        const createData: any = {
          userId,
          [stepName]: stepData,
          isCompleted: stepName === 'finalConfiguration'
        };

        await this.prisma.onboardingConfiguration.create({
          data: createData
        });

        console.log(`‚úÖ Nouvelle configuration cr√©√©e pour l'utilisateur ${userId}`);
      }
    } catch (error) {
      console.error(`‚ùå Erreur lors de la sauvegarde de l'√©tape ${stepName}:`, error);
      throw error;
    }
  }

  // R√©cup√©rer la configuration d'onboarding compl√®te
  async getOnboardingConfiguration(userId: string): Promise<any | null> {
    try {
      const config = await this.prisma.onboardingConfiguration.findUnique({
        where: { userId }
      });

      if (config) {
        console.log(`üìñ Configuration r√©cup√©r√©e pour l'utilisateur ${userId}`);
        return config;
      }

      console.log(`‚ö†Ô∏è Aucune configuration trouv√©e pour l'utilisateur ${userId}`);
      return null;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la r√©cup√©ration de la configuration:`, error);
      throw error;
    }
  }

  // V√©rifier si l'onboarding est compl√©t√©
  async isOnboardingCompleted(userId: string): Promise<boolean> {
    try {
      const config = await this.prisma.onboardingConfiguration.findUnique({
        where: { userId },
        select: { isCompleted: true }
      });

      return config?.isCompleted || false;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la v√©rification du statut d'onboarding:`, error);
      return false;
    }
  }

  // Supprimer la configuration d'onboarding
  async deleteOnboardingConfiguration(userId: string): Promise<void> {
    try {
      await this.prisma.onboardingConfiguration.delete({
        where: { userId }
      });

      console.log(`üóëÔ∏è Configuration supprim√©e pour l'utilisateur ${userId}`);
    } catch (error) {
      console.error(`‚ùå Erreur lors de la suppression de la configuration:`, error);
      throw error;
    }
  }

  // R√©cup√©rer les statistiques d'onboarding
  async getOnboardingStats(): Promise<{
    totalUsers: number;
    completedOnboarding: number;
    pendingOnboarding: number;
  }> {
    try {
      const totalUsers = await this.prisma.user.count();
      const completedOnboarding = await this.prisma.onboardingConfiguration.count({
        where: { isCompleted: true }
      });
      const pendingOnboarding = await this.prisma.onboardingConfiguration.count({
        where: { isCompleted: false }
      });

      return {
        totalUsers,
        completedOnboarding,
        pendingOnboarding
      };
    } catch (error) {
      console.error(`‚ùå Erreur lors de la r√©cup√©ration des statistiques:`, error);
      throw error;
    }
  }
}

// Instance singleton
export const onboardingDatabaseService = new OnboardingDatabaseService();
