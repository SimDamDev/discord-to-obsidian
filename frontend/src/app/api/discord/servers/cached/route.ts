import { NextRequest, NextResponse } from 'next/server';
import { mockDatabase, isDataRecent, storeServers, getServers } from '@/lib/mockDatabase';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');
    
    if (!userId) {
      return NextResponse.json(
        { error: 'userId manquant' },
        { status: 400 }
      );
    }
    
    // V√©rifier si on a des donn√©es r√©centes (moins de 15 minutes)
    if (isDataRecent(userId)) {
      const servers = getServers(userId);
      console.log(`üì¶ [Frontend API] ${servers.length} serveurs r√©cup√©r√©s depuis la base de donn√©es simul√©e`);
      return NextResponse.json({ 
        servers,
        cached: true,
        source: 'database',
        timestamp: new Date().toISOString()
      });
    }
    
    // Pas de donn√©es r√©centes
    return NextResponse.json({ 
      servers: [],
      cached: false,
      source: 'none',
      message: 'Aucune donn√©e r√©cente en base de donn√©es'
    });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des serveurs:', error);
    return NextResponse.json(
      { error: 'Erreur lors de la r√©cup√©ration des serveurs' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { userId, servers } = body;
    
    // Stocker les serveurs dans la base de donn√©es simul√©e
    storeServers(userId, servers);
    
    console.log(`üíæ [Frontend API] ${servers.length} serveurs stock√©s en base de donn√©es simul√©e pour l'utilisateur ${userId}`);
    
    return NextResponse.json({ 
      success: true, 
      message: `${servers.length} serveurs stock√©s`,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Erreur lors du stockage des serveurs:', error);
    return NextResponse.json(
      { error: 'Erreur lors du stockage des serveurs' },
      { status: 500 }
    );
  }
}
