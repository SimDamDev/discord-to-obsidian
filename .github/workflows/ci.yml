name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run linter
      working-directory: ./frontend
      run: npm run lint
    
    - name: Run type check
      working-directory: ./frontend
      run: npm run type-check
    
    - name: Run tests
      working-directory: ./frontend
      run: npm test
    
    - name: Build application
      working-directory: ./frontend
      run: npm run build
      env:
        NEXTAUTH_URL: http://localhost:3000
        NEXTAUTH_SECRET: test-secret
        DISCORD_CLIENT_ID: test-client-id
        DISCORD_CLIENT_SECRET: test-client-secret
        DATABASE_URL: postgresql://test:test@localhost:5432/test

  test-backend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Run linter
      working-directory: ./backend
      run: npm run lint
    
    - name: Run tests
      working-directory: ./backend
      run: npm test

  test-worker:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: worker/package-lock.json
    
    - name: Install dependencies
      working-directory: ./worker
      run: npm ci
    
    - name: Run linter
      working-directory: ./worker
      run: npm run lint
    
    - name: Run tests
      working-directory: ./worker
      run: npm test

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: |
        cd frontend && npm audit --audit-level=moderate
        cd ../backend && npm audit --audit-level=moderate
        cd ../worker && npm audit --audit-level=moderate
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  rgpd-compliance-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for personal data in code
      run: |
        # Vérifier qu'il n'y a pas de données personnelles dans le code
        if grep -r "password\|secret\|token" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" . | grep -v "process.env\|config\|example"; then
          echo "❌ Potential personal data found in code"
          exit 1
        fi
        echo "✅ No personal data found in code"
    
    - name: Check RGPD compliance files
      run: |
        # Vérifier que les fichiers de conformité RGPD existent
        test -f frontend/src/app/privacy/page.tsx || (echo "❌ Privacy page missing" && exit 1)
        test -f frontend/src/app/data-management/page.tsx || (echo "❌ Data management page missing" && exit 1)
        test -f frontend/src/components/onboarding/steps/ConsentStep.tsx || (echo "❌ Consent step missing" && exit 1)
        echo "✅ RGPD compliance files present"
